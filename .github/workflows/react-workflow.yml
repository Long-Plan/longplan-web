# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: React

on:
  push:
    branches:
      - main
      - develop

jobs:
  build-deploy-main:
    if: github.ref == 'refs/heads/main'
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4

      - uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Copy Repository to remote server
        run: |
          scp -o StrictHostKeyChecking=no -r * ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }}:/home/longplan/frontend/main/

      - name: Deploy Docker image on remote server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }} << EOF
            docker rm \$(docker ps -aqf "name=${{ env.APP_NAME }}") -f || true
            docker rmi \$(docker images -aqf "reference=${{ env.APP_NAME }}") || true
            docker build --platform linux/amd64 -t ${{ env.APP_NAME }} /home/longplan/frontend/main/
            docker run -d -p 3000:80 --restart unless-stopped --name ${{ env.APP_NAME }} ${{ env.APP_NAME }}
            find /home/longplan/frontend/main/ -mindepth 1 ! -path "/home/longplan/frontend/main/env*" -exec rm -rf {} +
            docker system prune -a -f
          EOF

    env:
      APP_NAME: prod-longplan-web

  build-deploy-develop:
    if: github.ref == 'refs/heads/develop'
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4

      - uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Copy Repository to remote server
        run: |
          scp -o StrictHostKeyChecking=no -r * ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }}:/home/longplan/frontend/develop/

      - name: Deploy Docker image on remote server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }} << EOF
            docker rm \$(docker ps -aqf "name=${{ env.APP_NAME }}") -f || true
            docker rmi \$(docker images -aqf "reference=${{ env.APP_NAME }}") || true
            docker build --platform linux/amd64 -f /home/longplan/frontend/develop/dev.dockerfile -t ${{ env.APP_NAME }} /home/longplan/frontend/develop/
            docker run -d -p 8080:80 --restart unless-stopped --name ${{ env.APP_NAME }} ${{ env.APP_NAME }}
            find /home/longplan/frontend/develop/ -mindepth 1 ! -path "/home/longplan/frontend/develop/env*" -exec rm -rf {} +
            docker system prune -a -f
          EOF

    env:
      APP_NAME: dev-longplan-web
